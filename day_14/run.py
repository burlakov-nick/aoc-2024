import aoc
from helpers import freq
from vec import V


def solve(r: aoc.Reader) -> None:
    (n, m), *robots = r.read(aoc.parse_ints)
    robots = [(V(p1, p2), V(v1, v2)) for p1, p2, v1, v2 in robots]

    def quadrant(p: V):
        if p.x == n // 2 or p.y == m // 2:
            return None
        qx = 1 if p.x < (n // 2) else 0
        qy = 2 if p.y < (m // 2) else 0
        return qx + qy

    def move(p: V, v: V, cnt: int):
        p = p + v * cnt
        return V(p.x % n, p.y % m)

    print("Part One")
    positions = [move(p, v, 100) for p, v in robots]
    quadrants = [quadrant(p) for p in positions if quadrant(p) is not None]
    freqs = freq(quadrants)
    print(freqs[0] * freqs[1] * freqs[2] * freqs[3])

    print("Part Two")
    for second in range(10000):  # 8087
        print("ITER", second)
        positions = {move(p, v, second) for p, v in robots}
        for x in range(n):
            line = "".join(["#" if V(x, y) in positions else "." for y in range(m)])
            print(line)
        print()

# ...............................
# ...............................
# ...............................
# ...............................
# .......................#.......
# ......................##.......
# ..................#..###.......
# .................##.####.......
# .............#..########.......
# ............##.#########.......
# ........#..#############.......
# .......##.##############.......
# ......##################.......
# .....######################....
# ....#######################....
# .....######################....
# ......##################.......
# .......##.##############.......
# ........#..#############.......
# ............##.#########.......
# .............#..########.......
# .................##.####.......
# ..................#..###.......
# ......................##.......
# .......................#.......
# ...............................
# ...............................
# ...............................
# ...............................
